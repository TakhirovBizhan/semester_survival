#!/usr/bin/env node
/**
 * scripts/reset-project.js
 *
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ "—á–∏—Å—Ç–æ–µ" —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
 * –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ‚Äî –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!
 *
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 *  - —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ /app-example –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö
 *  - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /app —Å index.tsx –∏ _layout.tsx
 *
 * –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
 *  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ package.json —É–∫–∞–∑–∞–Ω "reset-project": "node scripts/reset-project.js" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ npm run reset-project
 *  - –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–æ–±–µ–Ω –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å –≤–∞–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
 */

const fs = require("fs");
const path = require("path");
const readline = require("readline");

const root = process.cwd(); // –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç)
const oldDirs = ["app", "components", "hooks", "constants", "scripts"];
const exampleDir = "app-example";
const newAppDir = "app";
const exampleDirPath = path.join(root, exampleDir);

// –®–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ index.tsx ‚Äî –æ—á–µ–Ω—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
const indexContent = `import { Text, View } from "react-native";

export default function Index() {
  return (
    <View
      style={{
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Text>Edit app/index.tsx to edit this screen.</Text>
    </View>
  );
}
`;

// –®–∞–±–ª–æ–Ω –¥–ª—è _layout.tsx ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Stack-layout
const layoutContent = `import { Stack } from "expo-router";

export default function RootLayout() {
  return <Stack />;
}
`;

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π CLI –≤–≤–æ–¥ —á–µ—Ä–µ–∑ readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞:
 *  - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç 'y' ‚Äî –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã app-example –∏ –≤ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 *  - –µ—Å–ª–∏ 'n' ‚Äî —Å—Ç–∞—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã (recursive)
 *  - –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π /app —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º index/_layout
 */
const moveDirectories = async (userInput) => {
  try {
    if (userInput === "y") {
      // –°–æ–∑–¥–∞—ë–º /app-example (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
      await fs.promises.mkdir(exampleDirPath, { recursive: true });
      console.log(`üìÅ /${exampleDir} directory created.`);
    }

    for (const dir of oldDirs) {
      const oldDirPath = path.join(root, dir);
      if (fs.existsSync(oldDirPath)) {
        if (userInput === "y") {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ app-example
          const newDirPath = path.join(root, exampleDir, dir);
          await fs.promises.rename(oldDirPath, newDirPath);
          console.log(`‚û°Ô∏è /${dir} moved to /${exampleDir}/${dir}.`);
        } else {
          // –£–¥–∞–ª—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ ‚Äî –û–ü–ê–°–ù–û
          await fs.promises.rm(oldDirPath, { recursive: true, force: true });
          console.log(`‚ùå /${dir} deleted.`);
        }
      } else {
        console.log(`‚û°Ô∏è /${dir} does not exist, skipping.`);
      }
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /app (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    const newAppDirPath = path.join(root, newAppDir);
    await fs.promises.mkdir(newAppDirPath, { recursive: true });
    console.log("\nüìÅ New /app directory created.");

    // –ü–∏—à–µ–º –±–∞–∑–æ–≤—ã–π index.tsx
    const indexPath = path.join(newAppDirPath, "index.tsx");
    await fs.promises.writeFile(indexPath, indexContent);
    console.log("üìÑ app/index.tsx created.");

    // –ü–∏—à–µ–º –±–∞–∑–æ–≤—ã–π _layout.tsx
    const layoutPath = path.join(newAppDirPath, "_layout.tsx");
    await fs.promises.writeFile(layoutPath, layoutContent);
    console.log("üìÑ app/_layout.tsx created.");

    console.log("\n‚úÖ Project reset complete. Next steps:");
    console.log(
      `1. Run \`npx expo start\` to start a development server.\n2. Edit app/index.tsx to edit the main screen.${
        userInput === "y"
          ? `\n3. Delete the /${exampleDir} directory when you're done referencing it.`
          : ""
      }`
    );
  } catch (error) {
    // –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∏ –ø–µ—á–∞—Ç–∞–µ–º –æ—à–∏–±–∫—É ‚Äî –≤–∞–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç.–ø.
    console.error(`‚ùå Error during script execution: ${error.message}`);
  }
};

rl.question(
  "Do you want to move existing files to /app-example instead of deleting them? (Y/n): ",
  (answer) => {
    const userInput = answer.trim().toLowerCase() || "y";
    if (userInput === "y" || userInput === "n") {
      moveDirectories(userInput).finally(() => rl.close());
    } else {
      console.log("‚ùå Invalid input. Please enter 'Y' or 'N'.");
      rl.close();
    }
  }
);