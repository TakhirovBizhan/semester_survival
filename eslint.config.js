// https://docs.expo.dev/guides/using-eslint/
// ESLint — это инструмент для анализа кода.
// Он проверяет код на ошибки, несоответствия стилю и потенциальные баги.
// Можно сравнить его с "грамматическим редактором", но для JavaScript/TypeScript.

// Здесь мы импортируем функцию defineConfig, которая помогает корректно
// описывать конфигурацию ESLint в новом формате.
const { defineConfig } = require('eslint/config');

// expoConfig — это набор готовых правил от Expo.
// Он включает правила для React, React Native, а также рекомендуемые практики.
// Благодаря этому не нужно вручную подключать плагины для React/JSX.
const expoConfig = require('eslint-config-expo/flat');

// Экспортируем конфигурацию линтера.
// defineConfig делает конфиг более строгим и с автодополнением в редакторах.
module.exports = defineConfig([
  // Подключаем конфигурацию Expo, чтобы сразу получить адекватные правила линтинга
  expoConfig,

  // Дополнительно указываем свои настройки
  {
    // ignores — список файлов и папок, которые ESLint будет игнорировать.
    // В нашем случае это папка dist/* (туда попадает билд проекта).
    ignores: ['dist/*'],
  },
]);

/**
 * Как это работает в проекте:
 * 1. ESLint запускается (обычно через `npm run lint` или `npx eslint .`).
 * 2. Он проверяет все файлы проекта, кроме указанных в ignores.
 * 3. Для проверки используются правила из expoConfig и наши дополнительные.
 *
 * Зачем нужен ESLint:
 * - Находит синтаксические ошибки и предупреждает о потенциальных багах.
 * - Следит за стилем кода (например, где нужны ; или пробелы).
 * - Помогает команде писать код в едином стиле.
 * - Ускоряет ревью и снижает вероятность багов.
 */